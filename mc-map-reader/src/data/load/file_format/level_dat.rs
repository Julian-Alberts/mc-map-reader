use super::super::dimension::DimensionError;
use super::player_dat::PlayerError;
use crate::data::file_format::level_dat::*;

mod_try_from_tag!(
    LevelDat: [
        "allowCommands" => set_allow_commands test(1i8 => allow_commands = true),
        "BorderCenterX" => set_border_center_x test(1f64 => border_center_x = 1.),
        "BorderCenterZ" => set_border_center_z test(1f64 => border_center_z = 1.),
        "BorderDamagePerBlock" => set_border_damage_per_block test(1f64 => border_damage_per_block = 1.),
        "BorderSize" => set_border_size test(1f64 => border_size = 1.),
        "BorderSafeZone" => set_border_safe_zone test(1f64 => border_safe_zone = 1.),
        "BorderSizeLerpTarget" => set_border_size_lerp_target test(1f64 => border_size_lerp_target = 1.),
        "BorderSizeLerpTime" => set_border_size_lerp_time test(1i64 => border_size_lerp_time = 1),
        "BorderWarningBlocks" => set_border_warning_blocks test(1f64 => border_warning_blocks = 1.),
        "BorderWarningTime" => set_border_warning_time test(1f64 => border_warning_time = 1.),
        "clearWeatherTime" => set_clear_weather_time test(1i32 => clear_weather_time = 1),
        "CustomBossEvents" => set_custom_boss_events test(std::collections::HashMap::new() => custom_boss_events = std::collections::HashMap::new()),
        "DataPacks" => set_data_packs test(std::collections::HashMap::from_iter([
            ("Disabled".to_string(), crate::nbt::Tag::from(crate::nbt::List::from(vec![]))),
            ("Enabled".to_string(), crate::nbt::Tag::from(crate::nbt::List::from(vec![]))),
        ]) => data_packs = DataPacks {
            disabled: crate::nbt::List::from(vec![]),
            enabled: crate::nbt::List::from(vec![]),
        }),
        "DataVersion" => set_data_version test(1i32 => data_version = 1),
        "DayTime" => set_day_time test(1i64 => day_time = 1),
        "Difficulty" => set_difficulty test(1i8 => difficulty = 1),
        "DifficultyLocked" => set_difficulty_locked test(1i8 => difficulty_locked = true),
        "DimensionData" => set_dimension_data test(std::collections::HashMap::new() => dimension_data = Some(std::collections::HashMap::new())),
        "GameRules" => set_game_rules test(std::collections::HashMap::new() => game_rules = std::collections::HashMap::new()),
        "WorldGenSettings" => set_world_gen_settings test(std::collections::HashMap::from_iter([
            ("bonus_chest".to_string(), 1i8.into()),
            ("dimensions".to_string(), std::collections::HashMap::new().into()),
            ("seed".to_string(), 1i64.into()),
            ("generate_features".to_string(),1i8.into()),
        ]) => world_gen_settings = WorldGenSettings {
            bonus_chest: true,
            dimensions: std::collections::HashMap::new(),
            seed: 1,
            generate_features: true,
        }),
        "GameType" => set_game_type test(1i32 => game_type = 1),
        "generatorName" => set_generator_name test("Test".to_string() => generator_name = Some("Test".to_string())),
        "generatorOptions" => set_generator_options test(std::collections::HashMap::new() => generator_options = Some(std::collections::HashMap::new())),
        "generatorVersion" => set_generator_version test(1i32 => generator_version = Some(1)),
        "hardcore" => set_hardcore test(1i8 => hardcore = true),
        "initialized" => set_initialized test(1i8 => initialized = true),
        "LastPlayed" => set_last_played test(1i64 => last_played = 1),
        "LevelName" => set_level_name test("levelname".to_string() => level_name = "levelname".to_string()),
        "MapFeatures" => set_map_features test(1i8 => map_features = true),
        "Player" => set_player test(=> player = None),
        "raining" => set_raining test(1i8 => raining = true),
        "rainTime" => set_rain_time test(1i32 => rain_time = 1),
        "RandomSeed" => set_random_seed test(1i64 => random_seed = Some(1)),
        "SizeOnDisk" => set_size_on_disk test(1i64 => size_on_disk = Some(1)),
        "SpawnX" => set_spawn_x test(1i32 => spawn_x = 1),
        "SpawnY" => set_spawn_y test(1i32 => spawn_y = 1),
        "SpawnZ" => set_spawn_z test(1i32 => spawn_z = 1),
        "thundering" => set_thundering test(1i8 => thundering = true),
        "thunderTime" => set_thunder_time test(1i32 => thunder_time = 1),
        "Time" => set_time test(1i64 => time = 1),
        "version" => set_version test(1i32 => version = 1),
        "Version" => set_version_info test(std::collections::HashMap::from_iter([
            ("Id".to_string(), 1i32.into()),
            ("Name".to_string(), "name".to_string().into()),
            ("Series".to_string(), "ser".to_string().into()),
            ("Snapshot".to_string(), 1i8.into()),
        ]) => version_info = crate::data::file_format::level_dat::Version {
            id: 1,
            name: "name".to_string(),
            series: "ser".to_string(),
            snapshot: true
        }),
        "WanderingTraderId" => set_wandering_trader_id test(crate::nbt::Array::<i32>::from(vec![]) => wandering_trader_id = crate::nbt::Array::from(vec![])),
        "WanderingTraderSpawnChance" => set_wandering_trader_spawn_chance test(1i32 => wandering_trader_spawn_chance = 1),
        "WanderingTraderSpawnDelay" => set_wandering_trader_spawn_delay test(1i32 => wandering_trader_spawn_delay = 1),
        "WasModded" => set_was_modded test(1i8 => was_modded = true),
    ] ? [
        CustomBossEvent,
        DataPacks,
        WorldGenSettings,
        Player,
        Version,
    ],
    CustomBossEvent: [
        "Players" => set_players test(crate::nbt::List::from(vec![]) => players = crate::nbt::List::from(vec![])),
        "Color" => set_color test("Color".to_string() => color = "Color".to_string()),
        "CreateWorldFog" => set_create_world_fog test(1i8 => create_world_fog = true),
        "DarkenScreen" => set_darken_screen test(1i8 => darken_screen = true),
        "Max" => set_max test(1i32 => max = 1),
        "Value" => set_value test(1i32 => value = 1),
        "Name" => set_name test("name".to_string() => name = "name".to_string()),
        "Overlay" => set_overlay test("overlay".to_string() => overlay = "overlay".to_string()),
        "PlayBossMusic" => set_play_boss_music test(1i8 => play_boss_music = true),
        "Visible" => set_visible test(1i8 => visible = true),
    ],
    DataPacks: [
        "Disabled" => set_disabled test(crate::nbt::List::from(vec![]) => disabled = crate::nbt::List::from(vec![])),
        "Enabled" => set_enabled test(crate::nbt::List::from(vec![]) => enabled = crate::nbt::List::from(vec![])),
    ],
    WorldGenSettings: [
        "bonus_chest" => set_bonus_chest test(1i8 => bonus_chest = true),
        "dimensions" => set_dimensions test(std::collections::HashMap::new() => dimensions = std::collections::HashMap::new()),
        "seed" => set_seed test(1i64 => seed = 1),
        "generate_features" => set_generate_features test(1i8 => generate_features = true),
    ] ? [
        Dimension,
    ],
    Version: [
        "Id" => set_id test(1i32 => id = 1),
        "Name" => set_name test("name".to_string() => name = "name".to_string()),
        "Series" => set_series test("ser".to_string() => series = "ser".to_string()),
        "Snapshot" => set_snapshot test(1i8 => snapshot = true),
    ],
);
